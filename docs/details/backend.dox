/**
\addtogroup arrayfire_func
@{

\defgroup unified_func_setbackend setBackend

\brief Set the current backend when using Unified backend

This is a noop when using one of CPU, CUDA, or OpenCL backend.

However, when using on of those 3 but trying to set it to a different backend
will return in an exception.

\ingroup unified_func
\ingroup arrayfire_func

=======================================================================

\defgroup unified_func_addbackendlibrary af_add_backend_library

\brief Register an ArrayFire library located in an arbitrary path for use

The custom library's path can be anywhere in the local file system, even outside
of where the ArrayFire libraries are found by default (e.g. outside
`LD_LIBRARY_PATH` in Unix and System or User Path in Windows). Use this in tandem
with \ref af_set_backend_library(). The order of when this function was called
for a specific library determines the index to be used in
\ref af_set_backend_library() in order to activate the desired library. This is
useful especially for comparing the results or performance between different
versions of the ArrayFire libraries.

This is a noop when using any one of the standalone CPU, CUDA, or OpenCL backends.

The following is an example of how this can be used:
\code
af_add_backend_library("/path/to/custom/1/afcpu.so");
af_add_backend_library("/path/to/custom/2/afcpu.so");

af_set_backend_library(0); // Activates .../1/afcpu.so
af_set_backend_library(1); // Activates .../2/afcpu.so
\endcode

\ingroup unified_func
\ingroup arrayfire_func

=======================================================================

\defgroup unified_func_setbackendlibrary af_set_backend_library

\brief Activate an ArrayFire library located in an arbitrary path for use

Must be used after the ArrayFire library has been registered through
\ref af_add_backend_library(). The index to be passed in must be the order of when
\ref af_add_backend_library() was called for the target library. This is useful especially
for comparing the results or performance between different versions of the
arrayfire libraries.

This is a noop when using any one of the standalone CPU, CUDA, or OpenCL backends.

The following is an example of how this can be used:
\code
af_add_backend_library("/path/to/custom/1/afcpu.so");
af_add_backend_library("/path/to/custom/2/afcpu.so");

af_set_backend_library(0); // Activates .../1/afcpu.so
af_set_backend_library(1); // Activates .../2/afcpu.so
\endcode

\ingroup unified_func
\ingroup arrayfire_func

=======================================================================

\defgroup unified_func_checkunifiedbackend af_check_unified_backend

\brief Check if the application uses the unified backend or not

\p result will contain `true` if the unified backend is being used. Otherwise,
it will contain `false`.

\ingroup unified_func
\ingroup arrayfire_func

=======================================================================

\defgroup unified_func_getbackendcount getBackendCount

\brief Get the number of backends whose libraries were successfully loaded.

This will be between 0-3. 0 Being no backends were loaded and 3 being all
backends loaded successfully.

\ingroup unified_func
\ingroup arrayfire_func

=======================================================================

\defgroup unified_func_getavailbackends getAvailableBackends

\brief Returns an integer indicating the backends loaded successfully.

The number returned denotes the backends available according to the table:

Return Value | Backends Available
-------------|-----------------------
0            | None
1            | CPU
2            | CUDA
3            | CPU and CUDA
4            | OpenCL
5            | CPU and OpenCL
6            | CUDA and OpenCL
7            | CPU, CUDA and OpenCL

To convert the integer back into bools for each device, use the following code
\code
int backends = af::getAvailableBackends();

bool cpu    = backends & AF_BACKEND_CPU;
bool cuda   = backends & AF_BACKEND_CUDA;
bool opencl = backends & AF_BACKEND_OPENCL;
\endcode

\ingroup unified_func
\ingroup arrayfire_func

=======================================================================

\defgroup unified_func_getbackendid getBackendId

\brief Get's the backend enum for an array

This will return one of the values from the \ref af_backend enum.
The return value specifies which backend the array was created on.

\ingroup unified_func
\ingroup arrayfire_func

=======================================================================

\defgroup unified_func_getactivebackend getActiveBackend

\brief Get's the backend enum for the active backend

\ingroup unified_func
\ingroup arrayfire_func

=======================================================================

\defgroup unified_func_getdeviceid getDeviceId

\brief Get's the id of the device an array was created on.

\ingroup unified_func
\ingroup arrayfire_func

=======================================================================

@}
*/
