
/*!

\page signal_func_conv_desc Convolution

A convolution is a common operation between a source array, a, and a filter (or kernel) array b.
The answer to the convolution is the same as computing the coefficients in polynomial multiplication,
if a and b are the coefficients.

Another way to think about it is that the filter kernel is centered on each pixel in a,
and the output for that pixel or data point is the sum of the products.

Depending on the dimensions of the input signal and the filter signal, any one of the following
batch mode convolutions take place.

- **No Batch**   - Single filter applied to single input.
- **Filter is Batched**  - Many filters applied on same input
- **Signal is Batched**  - Single filter applied to a set of inputs.
- **Identical Batches** - A set of filters applied onto to a set of inputs in one-to-one correspondence.
- **Non overlapping Batches** - All batched filters are applied to all batched signals. The batch dimension of Signal and Filter **should not** be the same.

Non overlapping batch mode is not supported in spatial mode i.e. if the user passes \ref
AF_CONV_SPATIAL explicitly to the functions.


\page signal_func_fft_desc fft

The Fast Fourier Transform (FFT) is an efficient algorithm to compute the discrete Fourier
transform (DFT) of a signal or array. This is most commonly used to convert data in the
time (or space) domain to the frequency domain, Then, the inverse FFT (iFFT) is used to
return the data to the original domain.

There are numerous algorithms to compute the FFT of an array, and the specifics of the
algorithm depend on the target hardware. Most algorithms, however, use a Cooley-Tukey
scheme in a divide-and-conquer approach.

\note There are some convenience functions provided for fft where normalization
factor is not required as input paramter. In such cases, the normalization
factor is calculated internally based on the input data provided.

*/

//=====================================================================
/**
\addtogroup arrayfire_func
@{

\defgroup signal_func_convolve N-Dimensional Convolutions
\ingroup convolve_mat

\brief Convolution Integral for any(one through three) dimensional data

\copydoc signal_func_conv_desc

This version of convolution function delegates the call to respective
1D, 2D or 3D convolution functions internally.

Convolution dimensionality is \f$ \min (sd, fd) \f$ where sd & fd are dimensionality of
signal and filter respectively. This formulation only decides the dimensionality
of convolution. Please check the respective convolve (hyperlinked below) function
documentation to find out the kind of batch operations possible.
- \ref signal_func_convolve1
- \ref signal_func_convolve2
- \ref signal_func_convolve3

Given below are some examples.

| Input Dimensions | Filter Dimensions | Convolve Dimension |
|:----------------:|:-----------------:|:------------------:|
| [m n 1 1]        | [m 1 1 1]         |   1D               |
| [m 1 1 1]        | [m n 1 1]         |   1D               |
| [m n 1 1]        | [m n 1 1]         |   2D               |
| [m n 1 1]        | [m n p 1]         |   2D               |
| [m n 1 p]        | [m n 1 q]         |   3D               |
| [m n p 1]        | [m n q 1]         |   3D               |


\defgroup signal_func_convolve_sep Separable 2D Convolution
\ingroup convolve_mat

\brief Separable Convolution

Separable Convolution is faster equivalent of the canonical 2D convolution with
an additional prerequisite that the filter/kernel can be decomposed into two
separate spatial vectors. A classic example of such separable kernels
is sobel operator. Given below is decomposition of vertical gradient of sobel operator.

\f$
\begin{bmatrix}
-1 & 0 & +1 \\
-2 & 0 & +2 \\
-1 & 0 & +1 \\
\end{bmatrix}
\f$

can be decomposed into two vectors shown below.

\f$
\begin{bmatrix}
1 \\
2 \\
1 \\
\end{bmatrix}
\f$

\f$
\begin{bmatrix}
-1 & 0 & +1 \\
\end{bmatrix}
\f$


\defgroup signal_func_convolve1 1D Convolutions
\ingroup convolve_mat

\brief Convolution Integral for one dimensional data

\copydoc signal_func_conv_desc

For one dimensional signals(lets say m is size of 0th dimension), below batch operations are possible.

| Input Signal Dimensions | Filter Dimensions | Output Dimensions | Batch Mode              | Description |
|:-----------------------:|:-----------------:|:-----------------:|:-----------------------:|:------------|
| [m 1 1 1]               | [m 1 1 1]         | [m 1 1 1]         | No Batch                | Output will be a single convolved array |
| [m 1 1 1]               | [m n 1 1]         | [m n 1 1]         | Filter is Batched       | n filters applied to same input |
| [m n 1 1]               | [m 1 1 1]         | [m n 1 1]         | Signal is Batched       | 1 filter applied to n inputs |
| [m n p q]               | [m n p q]         | [m n p q]         | Identical Batches       | n*p*q filters applied to n*p*q inputs in one-to-one correspondence |
| [m n 1 1]               | [m 1 p q]         | [m n p q]         | Non-overlapping batches | p*q filters applied to n inputs to produce n x p x q results |

The last entry in the table has more permutations than shown here.



\defgroup signal_func_convolve2 2D Convolutions
\ingroup convolve_mat

\brief Convolution Integral for two dimensional data

\copydoc signal_func_conv_desc

For two dimensional signals, the following are the possible batch operations possible.
Lets say m & n as sizes along the 0th & 1st dimensions respectively and p & q are the
some integral numbers greater than one.

| Input Signal Dimensions | Filter Dimensions | Output Dimensions | Batch Mode              | Description |
|:-----------------------:|:-----------------:|:-----------------:|:-----------------------:|:------------|
| [m n 1 1]               | [m n 1 1]         | [m n 1 1]         | No Batch                | Output will be a single convolved array |
| [m n 1 1]               | [m n p 1]         | [m n p 1]         | Filter is Batched       | p filters applied to same input |
| [m n p 1]               | [m n 1 1]         | [m n p 1]         | Signal is Batched       | 1 filter applied to p inputs |
| [m n p q]               | [m n p q]         | [m n p q]         | Identical Batches       | p*q filters applied to p*q inputs in one-to-one correspondence |
| [m n p 1]               | [m n 1 q]         | [m n p q]         | Non-overlapping batches | q filters applied to p inputs in to produce p x q results |
| [m n 1 p]               | [m n q 1]         | [m n q p]         | Non-overlapping batches | q filters applied to p inputs in to produce q x p results |



\defgroup signal_func_convolve3 3D Convolutions
\ingroup convolve_mat

\brief Convolution Integral for three dimensional data

\copydoc signal_func_conv_desc

For three dimensional inputs with m, n & p sizes along the 0th, 1st & 2nd dimensions
respectively, given below are the possible batch operations.

| Input Signal Dimensions | Filter Dimensions | Output Dimensions | Batch Mode              | Description |
|:-----------------------:|:-----------------:|:-----------------:|:-----------------------:|:------------|
| [m n p 1]               | [a b c 1]         | [m n p 1]         | No Batch                | Output will be a single convolve array |
| [m n p 1]               | [a b c d]         | [m n p d]         | Filter is Batched       | d filters applied to same input |
| [m n p q]               | [a b c 1]         | [m n p q]         | Signal is Batched       | 1 filter applied to q inputs |
| [m n p k]               | [a b c k]         | [m n p k]         | Identical Batches       | k filters applied to k inputs in one-to-one correspondence |



\defgroup signal_func_fft fft
\ingroup fft_mat

\brief Fast Fourier Transform

\copydoc signal_func_fft_desc


\defgroup signal_func_fft2 fft2
\ingroup fft_mat

\brief Fast Fourier Transform

\copydoc signal_func_fft_desc


\defgroup signal_func_fft3 fft3
\ingroup fft_mat

\brief Fast Fourier Transform

\copydoc signal_func_fft_desc


\defgroup signal_func_ifft ifft
\ingroup fft_mat

\brief Fast Fourier Transform

\copydoc signal_func_fft_desc


\defgroup signal_func_ifft2 ifft2
\ingroup fft_mat

\brief Fast Fourier Transform

\copydoc signal_func_fft_desc


\defgroup signal_func_ifft3 ifft3
\ingroup fft_mat

\brief Fast Fourier Transform

\copydoc signal_func_fft_desc


\defgroup signal_func_fft_r2c fftR2C
\ingroup fft_mat

\brief Real to Complex Fast Fourier Transform


\defgroup signal_func_fft_c2r fftC2R
\ingroup fft_mat

\brief Complex to Real Fast Fourier Transform


\defgroup signal_func_approx1 approx1
\ingroup approx_mat

Performs interpolation on data along a single dimension.

Interpolation is the process of computing for unknown values within a
continuous range described by a discrete set of known values. These
known values (`in`) correspond to a uniformly-spaced range of indices
determined by start and step values, whose defaults are 0.0 and 1.0,
respectively.

The positions array (`pos`) contains the interpolating points (indices
whose values we want to find) along a given dimension. Values of **known indices**
will be looked up in the input array, while values of **unknown indices**
will be found via interpolation. Indices outside of the index range
are not extrapolated. Instead, those values are set `off_grid`, whose
default value is 0.0.

The following image illustrates a simple example (known values
represented by blue dots, unknown values represented by red dots):

\image html approx1_default_idx.png "approx1() using idx_start=0.0, idx_step=1.0"

Several interpolation methods are supported by approx1:

- Nearest neighbor interpolation - \ref AF_INTERP_NEAREST
- Linear interpolation (default) - \ref AF_INTERP_LINEAR, \ref AF_INTERP_LINEAR_COSINE
- Cubic interpolation - \ref AF_INTERP_CUBIC, \ref AF_INTERP_CUBIC_SPLINE
- Lower interpolation - \ref AF_INTERP_LOWER

Unless specified, linear interpolation is performed by default. Refer
to \ref af_interp_type for more information about ArrayFire's
interpolation types.

\defgroup signal_func_approx2 approx2
\ingroup approx_mat

Performs interpolation on data along two dimensions.

Interpolation is the process of computing for unknown values within a
continuous range described by a discrete set of known values. These
known values correspond to a uniformly-spaced range of indices
determined by start and step values, whose defaults are 0.0 and 1.0,
respectively.

The positions arrays (`pos0` and `pos1`) contain the interpolating
points (indices whose values we want to find) along two given
dimensions. Values of **known indices** will be looked up in the input
array, while values of **unknown indices** will be found via
interpolation. Indices outside of the index range are not
extrapolated. Instead, those values are set to `off_grid`, whose
default value is 0.0.

All of the interpolation methods defined in \ref af_interp_type are
supported by approx2. Unless specified, linear interpolation is
performed by default.

\defgroup signal_func_fir fir
\ingroup sigfilt_mat

\brief This function implements a Finite Impulse Filter

Finite impulse filters take an input **x** and a co-efficient array **b** to generate an output **y** such that:

       \f$y[n] = \sum_{i = 0}^N b_i . x[n]\f$


\defgroup signal_func_iir iir
\ingroup sigfilt_mat

\brief This function implements a Infinite Impulse Filter

Iinite impulse filters take an input **x** and a feedforward array **b**, feedback array **a** to generate an output **y** such that:

       \f$\sum_{j = 0}^Q a_j . y[n] = \sum_{i = 0}^P b_i . x[n]\f$
@}
*/
